'use client';

import React, { useState, useEffect } from 'react';
import {
  Card,
  CardHeader,
  CardBody,
  Button,
  Input,
  Textarea,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  useDisclosure,
  Chip,
  Divider,
} from '@nextui-org/react';
import { businessApi } from '@/api/business';
import { PrimarySpinner } from '@/components/ui/spinners/PrimarySpinner';

interface MenuItem {
  name: string;
  description: string;
  price: number;
  image?: string;
  isAvailable: boolean;
}

interface MenuCategory {
  name: string;
  description: string;
  items: MenuItem[];
}

interface MenuBuilderProps {
  businessId: number;
  initialMenu?: MenuCategory[];
  onMenuUpdate?: (menu: MenuCategory[]) => void;
}

export default function MenuBuilder({ businessId, initialMenu = [], onMenuUpdate }: MenuBuilderProps) {
  const [menu, setMenu] = useState<MenuCategory[]>(initialMenu);
  const [isLoading, setIsLoading] = useState(false);
  const [editingCategory, setEditingCategory] = useState<number | null>(null);
  const [editingItem, setEditingItem] = useState<{ categoryIndex: number; itemIndex: number } | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [showAddCategory, setShowAddCategory] = useState(false);

  // Load menu data
  useEffect(() => {
    loadMenu();
  }, [businessId]);

  const loadMenu = async () => {
    try {
      setIsLoading(true);
      const menuData = await businessApi.getMenu(businessId);
      if (menuData.categories) {
        setMenu(menuData.categories);
      }
    } catch (error) {
      console.error('Failed to load menu:', error);
      toast({
        title: "Error",
        description: "Failed to load menu data",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const addCategory = async (categoryData: Omit<MenuCategory, 'items'>) => {
    try {
      const newCategory: MenuCategory = { ...categoryData, items: [] };
      await businessApi.addMenuCategory(businessId, newCategory);
      setMenu([...menu, newCategory]);
      onMenuUpdate?.([...menu, newCategory]);
      toast({
        title: "Success",
        description: "Category added successfully",
      });
    } catch (error) {
      console.error('Failed to add category:', error);
      toast({
        title: "Error",
        description: "Failed to add category",
        variant: "destructive",
      });
    }
  };

  const updateCategory = async (categoryIndex: number, categoryData: MenuCategory) => {
    try {
      await businessApi.updateMenuCategory(businessId, categoryIndex, categoryData);
      const updatedMenu = [...menu];
      updatedMenu[categoryIndex] = categoryData;
      setMenu(updatedMenu);
      onMenuUpdate?.(updatedMenu);
      setEditingCategory(null);
      toast({
        title: "Success",
        description: "Category updated successfully",
      });
    } catch (error) {
      console.error('Failed to update category:', error);
      toast({
        title: "Error",
        description: "Failed to update category",
        variant: "destructive",
      });
    }
  };

  const deleteCategory = async (categoryIndex: number) => {
    try {
      await businessApi.deleteMenuCategory(businessId, categoryIndex);
      const updatedMenu = menu.filter((_, index) => index !== categoryIndex);
      setMenu(updatedMenu);
      onMenuUpdate?.(updatedMenu);
      toast({
        title: "Success",
        description: "Category deleted successfully",
      });
    } catch (error) {
      console.error('Failed to delete category:', error);
      toast({
        title: "Error",
        description: "Failed to delete category",
        variant: "destructive",
      });
    }
  };

  const addMenuItem = async (categoryIndex: number, itemData: MenuItem) => {
    try {
      await businessApi.addMenuItem(businessId, categoryIndex, itemData);
      const updatedMenu = [...menu];
      updatedMenu[categoryIndex].items.push(itemData);
      setMenu(updatedMenu);
      onMenuUpdate?.(updatedMenu);
      toast({
        title: "Success",
        description: "Menu item added successfully",
      });
    } catch (error) {
      console.error('Failed to add menu item:', error);
      toast({
        title: "Error",
        description: "Failed to add menu item",
        variant: "destructive",
      });
    }
  };

  const updateMenuItem = async (categoryIndex: number, itemIndex: number, itemData: MenuItem) => {
    try {
      await businessApi.updateMenuItem(businessId, categoryIndex, itemIndex, itemData);
      const updatedMenu = [...menu];
      updatedMenu[categoryIndex].items[itemIndex] = itemData;
      setMenu(updatedMenu);
      onMenuUpdate?.(updatedMenu);
      setEditingItem(null);
      toast({
        title: "Success",
        description: "Menu item updated successfully",
      });
    } catch (error) {
      console.error('Failed to update menu item:', error);
      toast({
        title: "Error",
        description: "Failed to update menu item",
        variant: "destructive",
      });
    }
  };

  const deleteMenuItem = async (categoryIndex: number, itemIndex: number) => {
    try {
      await businessApi.deleteMenuItem(businessId, categoryIndex, itemIndex);
      const updatedMenu = [...menu];
      updatedMenu[categoryIndex].items.splice(itemIndex, 1);
      setMenu(updatedMenu);
      onMenuUpdate?.(updatedMenu);
      toast({
        title: "Success",
        description: "Menu item deleted successfully",
      });
    } catch (error) {
      console.error('Failed to delete menu item:', error);
      toast({
        title: "Error",
        description: "Failed to delete menu item",
        variant: "destructive",
      });
    }
  };

  if (isLoading) {
    return <div className="flex justify-center p-8">Loading menu...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Menu Builder</h2>
        <CategoryDialog onAdd={addCategory} />
      </div>

      {menu.length === 0 ? (
        <Card>
          <CardContent className="p-8 text-center">
            <p className="text-muted-foreground mb-4">No menu categories yet</p>
            <CategoryDialog onAdd={addCategory} />
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {menu.map((category, categoryIndex) => (
            <CategoryCard
              key={categoryIndex}
              category={category}
              categoryIndex={categoryIndex}
              isEditing={editingCategory === categoryIndex}
              onEdit={() => setEditingCategory(categoryIndex)}
              onSave={(data) => updateCategory(categoryIndex, data)}
              onCancel={() => setEditingCategory(null)}
              onDelete={() => deleteCategory(categoryIndex)}
              onAddItem={(item) => addMenuItem(categoryIndex, item)}
              onUpdateItem={(itemIndex, item) => updateMenuItem(categoryIndex, itemIndex, item)}
              onDeleteItem={(itemIndex) => deleteMenuItem(categoryIndex, itemIndex)}
              editingItem={editingItem}
              setEditingItem={setEditingItem}
            />
          ))}
        </div>
      )}
    </div>
  );
}

// Category Dialog Component
function CategoryDialog({ onAdd, category, onUpdate }: {
  onAdd?: (category: Omit<MenuCategory, 'items'>) => void;
  category?: MenuCategory;
  onUpdate?: (category: MenuCategory) => void;
}) {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState(category?.name || '');
  const [description, setDescription] = useState(category?.description || '');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (category && onUpdate) {
      onUpdate({ ...category, name, description });
    } else if (onAdd) {
      onAdd({ name, description });
    }
    setOpen(false);
    setName('');
    setDescription('');
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="w-4 h-4 mr-2" />
          Add Category
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{category ? 'Edit Category' : 'Add Category'}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Category Name</Label>
            <Input
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div>
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">
              {category ? 'Update' : 'Add'} Category
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}

// Category Card Component
function CategoryCard({
  category,
  categoryIndex,
  isEditing,
  onEdit,
  onSave,
  onCancel,
  onDelete,
  onAddItem,
  onUpdateItem,
  onDeleteItem,
  editingItem,
  setEditingItem,
}: {
  category: MenuCategory;
  categoryIndex: number;
  isEditing: boolean;
  onEdit: () => void;
  onSave: (category: MenuCategory) => void;
  onCancel: () => void;
  onDelete: () => void;
  onAddItem: (item: MenuItem) => void;
  onUpdateItem: (itemIndex: number, item: MenuItem) => void;
  onDeleteItem: (itemIndex: number) => void;
  editingItem: { categoryIndex: number; itemIndex: number } | null;
  setEditingItem: (item: { categoryIndex: number; itemIndex: number } | null) => void;
}) {
  const [editName, setEditName] = useState(category.name);
  const [editDescription, setEditDescription] = useState(category.description);

  const handleSave = () => {
    onSave({
      ...category,
      name: editName,
      description: editDescription,
    });
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex justify-between items-start">
          {isEditing ? (
            <div className="flex-1 space-y-2">
              <Input
                value={editName}
                onChange={(e) => setEditName(e.target.value)}
                className="text-lg font-semibold"
              />
              <Textarea
                value={editDescription}
                onChange={(e) => setEditDescription(e.target.value)}
                placeholder="Category description"
              />
              <div className="flex space-x-2">
                <Button size="sm" onClick={handleSave}>
                  <Save className="w-4 h-4 mr-1" />
                  Save
                </Button>
                <Button size="sm" variant="outline" onClick={onCancel}>
                  <X className="w-4 h-4 mr-1" />
                  Cancel
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex-1">
              <CardTitle>{category.name}</CardTitle>
              {category.description && (
                <p className="text-muted-foreground mt-1">{category.description}</p>
              )}
            </div>
          )}
          {!isEditing && (
            <div className="flex space-x-2">
              <Button size="sm" variant="outline" onClick={onEdit}>
                <Edit className="w-4 h-4" />
              </Button>
              <Button size="sm" variant="outline" onClick={onDelete}>
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h4 className="font-medium">Menu Items ({category.items.length})</h4>
            <MenuItemDialog
              onAdd={onAddItem}
              categoryIndex={categoryIndex}
            />
          </div>
          
          {category.items.length === 0 ? (
            <p className="text-muted-foreground text-center py-4">No items in this category</p>
          ) : (
            <div className="grid gap-3">
              {category.items.map((item, itemIndex) => (
                <MenuItemCard
                  key={itemIndex}
                  item={item}
                  itemIndex={itemIndex}
                  categoryIndex={categoryIndex}
                  isEditing={editingItem?.categoryIndex === categoryIndex && editingItem?.itemIndex === itemIndex}
                  onEdit={() => setEditingItem({ categoryIndex, itemIndex })}
                  onSave={(updatedItem) => onUpdateItem(itemIndex, updatedItem)}
                  onCancel={() => setEditingItem(null)}
                  onDelete={() => onDeleteItem(itemIndex)}
                />
              ))}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

// Menu Item Dialog Component
function MenuItemDialog({ onAdd, item, onUpdate, categoryIndex }: {
  onAdd?: (item: MenuItem) => void;
  item?: MenuItem;
  onUpdate?: (item: MenuItem) => void;
  categoryIndex: number;
}) {
  const [open, setOpen] = useState(false);
  const [name, setName] = useState(item?.name || '');
  const [description, setDescription] = useState(item?.description || '');
  const [price, setPrice] = useState(item?.price || 0);
  const [isAvailable, setIsAvailable] = useState(item?.isAvailable ?? true);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const itemData: MenuItem = {
      name,
      description,
      price,
      isAvailable,
    };
    
    if (item && onUpdate) {
      onUpdate(itemData);
    } else if (onAdd) {
      onAdd(itemData);
    }
    
    setOpen(false);
    // Reset form
    setName('');
    setDescription('');
    setPrice(0);
    setIsAvailable(true);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm">
          <Plus className="w-4 h-4 mr-2" />
          Add Item
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>{item ? 'Edit Menu Item' : 'Add Menu Item'}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="item-name">Item Name</Label>
            <Input
              id="item-name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </div>
          <div>
            <Label htmlFor="item-description">Description</Label>
            <Textarea
              id="item-description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </div>
          <div>
            <Label htmlFor="item-price">Price ($)</Label>
            <Input
              id="item-price"
              type="number"
              step="0.01"
              min="0"
              value={price}
              onChange={(e) => setPrice(parseFloat(e.target.value) || 0)}
              required
            />
          </div>
          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="item-available"
              checked={isAvailable}
              onChange={(e) => setIsAvailable(e.target.checked)}
            />
            <Label htmlFor="item-available">Available</Label>
          </div>
          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">
              {item ? 'Update' : 'Add'} Item
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}

// Menu Item Card Component
function MenuItemCard({
  item,
  itemIndex,
  categoryIndex,
  isEditing,
  onEdit,
  onSave,
  onCancel,
  onDelete,
}: {
  item: MenuItem;
  itemIndex: number;
  categoryIndex: number;
  isEditing: boolean;
  onEdit: () => void;
  onSave: (item: MenuItem) => void;
  onCancel: () => void;
  onDelete: () => void;
}) {
  const [editName, setEditName] = useState(item.name);
  const [editDescription, setEditDescription] = useState(item.description);
  const [editPrice, setEditPrice] = useState(item.price);
  const [editAvailable, setEditAvailable] = useState(item.isAvailable);

  const handleSave = () => {
    onSave({
      name: editName,
      description: editDescription,
      price: editPrice,
      isAvailable: editAvailable,
    });
  };

  return (
    <div className="border rounded-lg p-4">
      {isEditing ? (
        <div className="space-y-3">
          <Input
            value={editName}
            onChange={(e) => setEditName(e.target.value)}
            className="font-medium"
          />
          <Textarea
            value={editDescription}
            onChange={(e) => setEditDescription(e.target.value)}
            placeholder="Item description"
          />
          <div className="flex items-center space-x-4">
            <div className="flex-1">
              <Label>Price ($)</Label>
              <Input
                type="number"
                step="0.01"
                min="0"
                value={editPrice}
                onChange={(e) => setEditPrice(parseFloat(e.target.value) || 0)}
              />
            </div>
            <div className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={editAvailable}
                onChange={(e) => setEditAvailable(e.target.checked)}
              />
              <Label>Available</Label>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button size="sm" onClick={handleSave}>
              <Save className="w-4 h-4 mr-1" />
              Save
            </Button>
            <Button size="sm" variant="outline" onClick={onCancel}>
              <X className="w-4 h-4 mr-1" />
              Cancel
            </Button>
          </div>
        </div>
      ) : (
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <div className="flex items-center space-x-2">
              <h5 className="font-medium">{item.name}</h5>
              {!item.isAvailable && (
                <span className="text-xs bg-red-100 text-red-800 px-2 py-1 rounded">
                  Unavailable
                </span>
              )}
            </div>
            {item.description && (
              <p className="text-sm text-muted-foreground mt-1">{item.description}</p>
            )}
            <p className="text-lg font-semibold mt-2">${item.price.toFixed(2)}</p>
          </div>
          <div className="flex space-x-2">
            <Button size="sm" variant="outline" onClick={onEdit}>
              <Edit className="w-4 h-4" />
            </Button>
            <Button size="sm" variant="outline" onClick={onDelete}>
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
